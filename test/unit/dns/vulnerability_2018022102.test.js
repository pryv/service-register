const config = require('../../../source/utils/config');
const dns = require('../../../source/dns/ndns-wrapper');
const ndns = require('../../../source/dns/ndns');
const Client = ndns.Client;
const { serverForName, logger } = require('../../../source/dns/server_for_name.js');

/* global describe, it */

describe('DNS vulnerability checks', () => {
  it('should not answer to DNS responses', (done) => {
    // Mock out DNS environment, simulating the case where our DNS receives
    // a query that is in fact a (replayed) DNS response.
    // We want to ensure that our DNS do not answer to DNS responses,
    // since it would make it vulnerable to DOS attacks.
        
    const port = config.get('dns:port');
    const ip = config.get('dns:ip');

    const ready = require('readyness');
    ready.setLogger(logger.info);
    /*
    var readyListening = ready.waitFor('app_dns:listening');
    dns.start(port, ip, serverForName, readyListening);
    */
    const req = {
      q: [{
        name:'google.ch',
        type:1,
        class:1,
        typeName:'A',
        className:'IN'
      }],
      header: {}
    };
    const type = 'udp4';
    
    const legitClient = new Client(type, legitResponseListener);
    const attackClient = new Client(type, attackResponseListener);
    
    // This first query should not be answered by our DNS.
    // The QR header is set to 1, which indicates that the query
    // is actually a DNS response (potentially replayed by an attacker).
    req.header.qr = 1;
    attackClient.request(port, ip).send(req);
    
    // This second query should be answered by our DNS.
    // The QR header is set to 0, which indicates that the query
    // is a legit DNS query.
    // We delay this query so that if we get an answer, we assume that the
    // previous query was not answered (as expected).
    setTimeout(() => {
      req.header.qr = 0;
      legitClient.request(port, ip).send(req);
    }, 1000);
    
    function legitResponseListener () {
      done();
    }
    
    function attackResponseListener () {
      throw new Error('DNS just answered to a DNS response, '+
        'which makes it vulnerable to DOS attacks!');
    }
    
  });
});