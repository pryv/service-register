#!/usr/bin/env bash

set -e

# Builds 'service-register' docker image with the version given below. 
scripts/build_name

version=$(cat build_tag)
if [ -e release_build ]; then
  echo "This is a release build, it will update 'latest' tags."
fi

function release {
  local service_name=$1
  local version=$2
  
  if [ -e ../release_build ]; then
    sudo docker tag $service_name:$version $service_name:latest

    # Publication to registry:
    sudo docker tag $service_name:$version localhost:5000/$service_name:$version
    sudo docker tag $service_name:$version localhost:5000/$service_name:latest
    
    sudo docker push localhost:5000/$service_name:$version
    sudo docker push localhost:5000/$service_name:latest
  fi
}

pushd ..

# Compile all source code to 'lib'. 
npm run release

# Hide the real source code
mv source source.hidden
mv lib source

# Create a release.tar that contains all the code. 
tar cf build/release.tar \
  --exclude .git \
  --exclude node_modules \
  --exclude build \
  --exclude source.hidden \
  .
  
# Now that the tar is done, move the code back in place. 
[[ -e source.hidden ]] && rm -r source && mv source.hidden source

popd
exit 1

# Build the docker image (commented out)
echo "---------------------------- building register ------------------------------"
pushd register
cp ../release.tar .
sudo docker build -f Dockerfile -t pryv/register:$version .
release "pryv/register" $version
popd

echo "---------------------------- building dns -----------------------------------"
pushd dns
cp ../release.tar .
sudo docker build -f Dockerfile -t pryv/dns:$version .
release "pryv/dns" $version
popd

